# -*- coding: utf-8 -*-
"""car_price_predictor and web.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Z2_4NgEsQ8yLFcO86TxIOrPynajlp2CB
"""

import pandas as pd
data=pd.read_csv("F:\\Python\\ML\\quikr_car.csv")

data.head()

data.info()

data['year'].unique()

data['fuel_type'].unique()

data['kms_driven'].unique()

data['Price'].unique()

data.shape

backup=data.copy()

data=data[data['year'].str.isnumeric()]

data['year']=data['year'].astype(int)

data.info()

data=data[data['Price']!="Ask For Price"]

data['Price']=data['Price'].str.replace(',','').astype(int)

data['kms_driven']=data['kms_driven'].str.split(' ').str.get(0).str.replace(',','')

data=data[data['kms_driven'].str.isnumeric()]

data['kms_driven']=data['kms_driven'].astype(int)

data.info()

data=data[~data['fuel_type'].isna()]

data['name']=data['name'].str.split(' ').str.slice(0,3).str.join(' ')

data=data.reset_index(drop=True)

data.info()

data.describe()

data[data['Price']>5000000]

data=data[data['Price']<5000000].reset_index(drop=True)

data.to_csv('cleanedcardata.csv')

x=data.drop(columns='Price')
y=data['Price']

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score
from sklearn.preprocessing import OneHotEncoder
import numpy as np

x_trg,x_test,y_trg,y_test=train_test_split(x,y,test_size=0.2)

from sklearn.compose import make_column_transformer
from sklearn.pipeline import make_pipeline

ohe=OneHotEncoder()
ohe.fit(x[['name','company','fuel_type']])

columns=make_column_transformer((OneHotEncoder(categories=ohe.categories_),['name','company','fuel_type']),remainder='passthrough',force_int_remainder_cols=False)

model=LinearRegression()

pipe=make_pipeline(columns,model)

pipe.fit(x_trg,y_trg)

y_pred=pipe.predict(x_test)

r2_score(y_test,y_pred)

s=[]
for i in range(1000):
    x_trg,x_test,y_trg,y_test=train_test_split(x,y,test_size=0.2,random_state=i)
    model=LinearRegression()
    pipe=make_pipeline(columns,model)
    pipe.fit(x_trg,y_trg)
    y_pred=pipe.predict(x_test)
    s.append(r2_score(y_test,y_pred))

np.argmax(s)

s[np.argmax(s)]

x_trg,x_test,y_trg,y_test=train_test_split(x,y,test_size=0.2,random_state=np.argmax(s))
model=LinearRegression()
pipe=make_pipeline(columns,model)
pipe.fit(x_trg,y_trg)
y_pred=pipe.predict(x_test)
r2_score(y_test,y_pred)

import pickle
pickle_out=open("cp_model.pkl","wb")
pickle.dump(pipe,pickle_out)
pickle_out.close()

